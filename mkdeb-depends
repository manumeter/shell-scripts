#!/bin/bash

# Idea from https://github.com/tpo/betriebssysteme/blob/master/ansible_demo/library/dpkg_dep

help() {
	echo "Usage: mkdeb-depends name version depends [file.deb]"
	echo
	echo "Create a deb package for Debian / Ubuntu only containing dependency"
	echo "information. This helps recognizing relationship of packages and"
	echo "installed software. It also avoids accidental uninstalls."
	echo
	echo "Examples: "
	echo
	echo "    mkdeb-depends mutt-dependencies 1.3.17-1 \"libc6 (>= 2.2.1), exim | mail-transport-agent\"" test.deb
	echo "    mkdeb-depends config5-dependencies 0.1 \"perl-modules, libtemplate-perl, lsb-release, curl, udev\""
	echo
	exit 1
}

[ "$1" == "--help" ] && help
[ -z "$1" ] || [ -z "$2" ] || [ -z "$3" ] && help

DEB="${1}_${2}_all"
mkdir -p "/tmp/$DEB/DEBIAN"

echo "Package: $1" >> "/tmp/$DEB/DEBIAN/control"
echo "Priority: optional" >> "/tmp/$DEB/DEBIAN/control"
echo "Section: dependencies" >> "/tmp/$DEB/DEBIAN/control"
echo "Installed-Size: 0" >> "/tmp/$DEB/DEBIAN/control"
echo "Maintainer: unknown" >> "/tmp/$DEB/DEBIAN/control"
echo "Architecture: all" >> "/tmp/$DEB/DEBIAN/control"
echo "Source: none" >> "/tmp/$DEB/DEBIAN/control"
echo "Version: $2" >> "/tmp/$DEB/DEBIAN/control"
echo "Depends: $3" >> "/tmp/$DEB/DEBIAN/control"
echo "Description: dependencies for $1" >> "/tmp/$DEB/DEBIAN/control"

( cd "/tmp" ; dpkg-deb -b "$DEB" > /dev/null )
mv "/tmp/${DEB}.deb" .
rm -rf "/tmp/$DEB"
[ -z "$4" ] || mv "${DEB}.deb" "$4"

DEB="${DEB}.deb"
[ -z "$4" ] || DEB="$4"

echo "Done. Use \"dpkg -i $DEB ; apt-get install -f\" to install all dependencies"
